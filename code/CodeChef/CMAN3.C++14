#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ff first
#define se second
#define pb push_back
#define nn 100100
#define mt make_tuple
#define mp make_pair
#define ll long long int
#define db double
#define ldb long double
#define inf 200000ll
#define logn 20
#define mod 1000000007ll
#define mod1 mod
#define mod2 100000009ll
#define sqr(a) a*1ll*a
#define nullp mp(-1,-1)
#define set0(a) memset(a,0,sizeof a)
#define init(a) memset(a,-1,sizeof a)
#define cmp 1e-16
#define input1(a) int a;cin>>a;
#define input2(p,q,r) long p,q,r;cin>>p>>q>>r;
#define input3(i,a) for(int i=0;i<a;i++)
#define vll vector<ll>
 
using namespace std;
using namespace __gnu_pbds;

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template <typename Arg1>
    void __f(const char* name, Arg1&& arg1){
        cout << name << " : " << arg1 << endl;
    }
    template <typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names + 1, ','); cout.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
    }
#else
#define trace(...)
#endif

typedef pair<int,int> pii;
typedef pair<long long ,int> pli;
typedef pair<int,long long > pil;
typedef pair<long long ,long long > pll;
typedef pair<long double,long double> pdd;
template<class T>
using max_pq = priority_queue<T>;
template<class T>
using min_pq = priority_queue<T,vector<T>,greater<T>>;
typedef tree<int, null_type, less<int>, rb_tree_tag, 
tree_order_statistics_node_update> OST;

template<class T> T gcd(T a,T b){return (b==0)?a:gcd(b,a%b);}
long long  pow(ll a,ll p,ll m=mod)
{long long  res=1;while(p>0){if(p&1)res = (res*a)%m;a=(a*a)%m;p>>=1;}
return res;}

const ldb pi=3.141592653589793238462643383;



const int MAXN = (int)((1e5) + 10);
int gcd(int a,int b) { if (a == 0) return b; return gcd(b%a, a);}
int max(int a,int b){if(a>b) return a; else return b;}
int min(int a,int b){if(a<b) return a; else return b;}  
bool isPrime(int N){ for(int i=2;i*i<=N;++i){if(N%i==0) return false;}return true;}
int cbrt(int x){ int lo=1,hi=min(2000000ll,x);while(hi-lo>1){int mid=(lo+hi)/2;if(mid*mid*mid<x){lo=mid;}else hi=mid;}if(hi*hi*hi<=x) return hi;else return lo;} 
vector <int> m[5005];
const int dx[4] = {-1, 1, 0, 0};
const int dy[4] = {0, 0, -1, 1};
const int nax =  (int)(5*1e5); 
// int SPF[N+5];

// void SOF()
// {
//     SPF[1] = 1;
//     for (int i=2; i<N; i++)
//         SPF[i] = i;
//     for (int i=4; i<N; i+=2)
//         SPF[i] = 2;
 
//     for (int i=3; i*i<N; i++)
//         {
//         if (SPF[i] == i)
//             {
//             for (int j=i*i; j<N; j+=i)
//                 if (SPF[j]==j)
//                    SPF[j] = i;
//             }
//         }
// }


vector<int>adj[nn];
ll dp[nn][2][2];

int dfs(int node,int par)
{
    if(adj[node].size()==1 && node!=par)
    {
        dp[node][0][1]=dp[node][0][0]=dp[node][1][1]=inf;
        dp[node][1][0]=1;
        return 1;
    }
    for(int i=0;i<2;i++)
    {
        for(int j=0;j<2;j++)
            dp[node][i][j]=0;
    }
    ll t1=inf,t2=inf,t3=inf,t4=inf;
    int h=inf;
    for(auto& u:adj[node])
    {
        if(u==par)
            continue;
        h=min(h,dfs(u,node));
        ll tmp=min(dp[u][1][0],dp[u][1][1]);
        ll tmp2=min(tmp,min(dp[u][0][1],dp[u][0][0]));
        dp[node][0][0]+=min(tmp,dp[u][0][0]);
        dp[node][0][1]+=min(tmp,dp[u][0][0]);
        dp[node][1][0]+=tmp2;
        dp[node][1][1]+=tmp2;
        if(tmp-min(tmp,dp[u][0][0])<t2)
        {
            t2=tmp-min(tmp,dp[u][0][0]);
        }
        if(t2<t1)
            swap(t1,t2);
        t3=min(t3,min(dp[u][0][1],dp[u][0][0])-tmp2);
        t4=min(t4,tmp-tmp2);
    }
    assert(t2>=t1);
    dp[node][0][1]+=t1;
    dp[node][0][0]+=(t1+t2);
    dp[node][1][0]+=t3+1;
    dp[node][1][1]+=t4+1;
    if(h==1)
        dp[node][0][0]=inf;
    return h+1;
}

int slide(string s, int size,int no,int nz,vector<int> l,int so,int se,int n)
{
  set<pair<pair<int,int>,pair<int,int>>> sew;
  sew.insert(make_pair(make_pair(no,nz),make_pair(so,se)));
  for(int i=size;i<n;i++)
  {
    if(s[i-size]=='1')
    {
      l.erase(l.begin());
      int t=se;
      se=so;
      so=t;
      no-=1;
    }
    else
    {
      nz-=1;
      l[0]-=1;
      se-=1;
    }
    if(s[i]=='1')
    {
      no+=1;
      l.push_back(0);
    }
    else
    {
      nz+=1;
      l[l.size()-1]+=1;
      if(l.size()%2==1)
      {
        se+=1;
      }
      else
      {
        so+=1;
      }
    }
    sew.insert(make_pair(make_pair(no,nz),make_pair(so,se)));
  }
  return sew.size();
}
int substring(string s,int n,int len)
{
  vector<int> l;
  int rt=0,no=0,nz=0,so=0,se=0,cur=0;
  for(int i=0;i<n;i++)
  {
    if (s[i]=='0')
    {
      if (cur%2==0)
        se+=1;
      else
        so+=1;
      rt+=1;
      nz+=1;
    }
    else
    {
      l.push_back(rt);
      rt=0;
            cur+=1;
            no+=1;
        }
    }
    l.push_back(rt);
    return slide(s,n,no,nz,l,so,se,len);
}


int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("out.txt","w",stdout);
    #endif
    int t;
    int count,min,max;
    cin>>t;
    while((t--)!=0)
    {

      int n,len=0,i,p;
cin>>n>>p;
string a[n],query[p];
//entering a sequence of relatives
for(i=0;i<n;i++)
cin>>a[i];
for(i=0;i<p;i++)
cin>>query[i];
//concatenation of strings
int j;
for(j=0;j<p;j++)
{
max=0,min=1000000;
for(i=0;i<n;i++)
{ count=0;
string result=a[i]+query[j];
//cout<<result<<endl;
int l=result.length();//length of concatenated string
len=l;
//cout<<len<<" ";
// this while block checks how many steps is required to convert concatenated into the first composite number(ie. FOUR)
while(len!=4)
{
switch(len)
{
case 0:
len=4;
count++;
break;
case 1:
len=3;
count++;
break;
case 2:
len=3;
count++;
break;
case 3:
len=5;
count++;
break;
case 4:
len=4;
count++;
break;
case 5:
len=4;
count++;
break;
case 6:
len=3;
count++;
break;
case 7:
len=5;
count++;
break;
case 8:
len=5;
count++;
break;
case 9:
len=4;
count++;
break;

          }//end of switch
        }//end of inner while loop
        //calculating minimum and maximum of count
        if(count<min)
        {
                    min=count;
                }
                if(count>max)
                    max=count;
                cout<<count<<" ";//this cout display all the count values for every single query on  a single line
            }//end of array
        cout<<endl;//this endl seperates count values for every single quer
        cout<<min<<" "<<max<<endl;
    }//end of while loop of query
}//end of testcase loop




      


    




       return 0;
        
    
    
}